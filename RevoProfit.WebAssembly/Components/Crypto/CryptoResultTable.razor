@inject AppState AppState
@inject IStringLocalizer<Localization> Loc
@implements IDisposable

@if (AppState.CryptoRetraits.Any())
{
    <h3 class="mt-5">💶 @string.Format(Loc[nameof(Localization.ResultsIn)], "€")</h3>
    <div class="table-responsive">
        <table class="table">
            <tr>
                <th scope="col">@Loc[nameof(Localization.Year)]</th>
                <th scope="col">@Loc[nameof(Localization.GainsInEuros)]</th>
                <th scope="col">@Loc[nameof(Localization.FiatFees)]</th>
            </tr>
            @foreach (var annualReport in AppState.CryptoReports)
            {
                <tr>
                    <td>@annualReport.Year</td>
                    <td>@annualReport.GainsEnEuros.ToString("C", _fr)</td>
                    <td>@annualReport.FraisEnEuros.ToString("C", _fr)</td>
                </tr>
            }
        </table>
    </div>
}
@if (AppState.CryptoRetraits.Any())
{
    <h3 class="mt-5">@Loc[nameof(Localization.SellOrderDetails)]</h3>
    <div class="table-responsive">
        <table class="table">
            <tr>
                <th scope="col">@Loc[nameof(Localization.Date)]</th>
                <th scope="col">@Loc[nameof(Localization.CryptoSymbol)]</th>
                <th scope="col">@Loc[nameof(Localization.Amount)]</th>
                <th scope="col">@Loc[nameof(Localization.AmountInEuros)]</th>
                <th scope="col">@Loc[nameof(Localization.GainsInEuros)]</th>
            </tr>
            @foreach (var cryptoRetrait in AppState.CryptoRetraits)
            {
                <tr>
                    <td>@cryptoRetrait.Date</td>
                    <td>@cryptoRetrait.Jeton</td>
                    <td>@Math.Round(cryptoRetrait.Montant, 10, MidpointRounding.ToEven)</td>
                    <td>@cryptoRetrait.MontantEnEuros.ToString("C", _fr)</td>
                    <td>@cryptoRetrait.GainsEnEuros.ToString("C", _fr)</td>
                </tr>
            }
        </table>
    </div>
}
@if (AppState.CryptoAssets.Any())
{
    <h3 class="mt-5">@Loc[nameof(Localization.CryptoLefts)]</h3>
    <div class="table-responsive">
        <table class="table">
            <tr>
                <th scope="col">@Loc[nameof(Localization.CryptoSymbol)]</th>
                <th scope="col">@Loc[nameof(Localization.Amount)]</th>
                <th scope="col">@Loc[nameof(Localization.AmountInEuros)]</th>
                <th scope="col">@Loc[nameof(Localization.Fees)]</th>
            </tr>
            @foreach (var cryptoAsset in AppState.CryptoAssets)
            {
                <tr>
                    <td>@cryptoAsset.Jeton</td>
                    <td>@Math.Round(cryptoAsset.Montant, 10, MidpointRounding.ToEven)</td>
                    <td>@cryptoAsset.MontantEnEuros.ToString("C", _fr)</td>
                    <td>@Math.Round(cryptoAsset.Frais, 10, MidpointRounding.ToEven)</td>
                </tr>
            }
        </table>
    </div>
}

@code {
    readonly CultureInfo _fr = CultureInfo.GetCultureInfo("fr-FR");

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }
}
