@inject AppState AppState
@inject IStringLocalizer<Localization> Loc
@using RevoProfit.Core.Stock.Models
@implements IDisposable

@if (AppState.StockAnnualReports.Any())
{
    <h3 class="mt-5">💵 @string.Format(Loc[nameof(Localization.ResultsIn)], "$")</h3>
    <div class="table-responsive">
        <table class="table">
            <tr>
                <th scope="col">@Loc[nameof(Localization.Year)]</th>
                <th scope="col">@Loc[nameof(Localization.Gains)]</th>
                <th scope="col">@Loc[nameof(Localization.CashTopUp)]</th>
                <th scope="col">@Loc[nameof(Localization.CashWithdrawal)]</th>
                <th scope="col">@Loc[nameof(Localization.Dividends)]</th>
                <th scope="col">@Loc[nameof(Localization.CustodyFee)]</th>
            </tr>
            @foreach (var annualReport in AppState.StockAnnualReports)
            {
                <tr>
                    <td>@annualReport.Year</td>
                    <td>@annualReport.Gains.ToString("C", _us)</td>
                    <td>@annualReport.CashTopUp.ToString("C", _us)</td>
                    <td>@annualReport.CashWithdrawal.ToString("C", _us)</td>
                    <td>@annualReport.Dividends.ToString("C", _us)</td>
                    <td>@annualReport.CustodyFee.ToString("C", _us)</td>
                </tr>
            }
        </table>
    </div>

    <h3 class="mt-5">💶 @string.Format(Loc[nameof(Localization.ResultsIn)], "€")</h3>
    <div class="table-responsive">
        <table class="table">
            <tr>
                <th scope="col">@Loc[nameof(Localization.Year)]</th>
                <th scope="col">@Loc[nameof(Localization.Gains)]</th>
                <th scope="col">@Loc[nameof(Localization.CashTopUp)]</th>
                <th scope="col">@Loc[nameof(Localization.CashWithdrawal)]</th>
                <th scope="col">@Loc[nameof(Localization.Dividends)]</th>
                <th scope="col">@Loc[nameof(Localization.CustodyFee)]</th>
            </tr>
            @foreach (var annualReport in AppState.StockAnnualReports)
            {
                <tr>
                    <td>@annualReport.Year</td>
                    <td>@annualReport.GainsInEuro.ToString("C", _fr)</td>
                    <td>@annualReport.CashTopUpInEuro.ToString("C", _fr)</td>
                    <td>@annualReport.CashWithdrawalInEuro.ToString("C", _fr)</td>
                    <td>@annualReport.DividendsInEuro.ToString("C", _fr)</td>
                    <td>@annualReport.CustodyFeeInEuro.ToString("C", _fr)</td>
                </tr>
            }
        </table>
    </div>

    <h3 class="mt-5">@Loc[nameof(Localization.SellOrderDetails)]</h3>
    @foreach (var annualReport in AppState.StockAnnualReports)
    {
        <div class="table-responsive">
            <table class="table">
                <tr>
                    <th scope="col" colspan="5">@annualReport.Year</th>
                </tr>
                <tr>
                    <th scope="col">@Loc[nameof(Localization.Date)]</th>
                    <th scope="col">@Loc[nameof(Localization.Ticker)]</th>
                    <th scope="col">@Loc[nameof(Localization.Amount)]</th>
                    <th scope="col">@Loc[nameof(Localization.Gains)]</th>
                    <th scope="col">@Loc[nameof(Localization.Gains)]</th>
                </tr>
                @foreach (var sellOrder in annualReport.StockSellOrders)
                {
                    <tr>
                        <td>@sellOrder.Date</td>
                        <td>@sellOrder.Ticker</td>
                        <td>@sellOrder.Amount.ToString("C", _us)</td>
                        <td>@sellOrder.Gains.ToString("C", _us)</td>
                        <td>@((sellOrder.Gains * sellOrder.FxRate).ToString("C", _fr))</td>
                    </tr>
                }
            </table>
        </div>
    }
}

@if (AppState.StockOwneds.Any())
{
    <h3 class="mt-5">@Loc[nameof(Localization.StockLefts)]</h3>
    <div class="table-responsive">
        <table class="table">
            <tr>
                <th scope="col">@Loc[nameof(Localization.Ticker)]</th>
                <th scope="col">@Loc[nameof(Localization.AveragePrice)]</th>
                <th scope="col">@Loc[nameof(Localization.Amount)]</th>
                <th scope="col">@Loc[nameof(Localization.Dividends)]</th>
                <th scope="col">@Loc[nameof(Localization.AmountInDollars)]</th>
            </tr>
            @foreach (var stockOwned in AppState.StockOwneds.Where(IsNotEmpty))
            {
                <tr>
                    <td>@stockOwned.Ticker</td>
                    <td>@stockOwned.AveragePrice.ToString("C", _us)</td>
                    <td>@stockOwned.Quantity</td>
                    <td>@stockOwned.TotalDividend.ToString("C", _us)</td>
                    <td>@stockOwned.ValueInserted.ToString("C", _us)</td>
                </tr>
            }
        </table>
    </div>
}

@code {
    readonly CultureInfo _us = CultureInfo.GetCultureInfo("en-US");
    readonly CultureInfo _fr = CultureInfo.GetCultureInfo("fr-FR");
    const double Dummy = 999.99d;

    protected override void OnInitialized()
    {
        AppState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        AppState.OnChange -= StateHasChanged;
    }

    private static bool IsNotEmpty(StockOwned owned)
    {
        return !(owned.Quantity == 0 &&
               owned.TotalDividend == 0 &&
               owned.ValueInserted == 0);
    }
}
